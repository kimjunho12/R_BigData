test[-c(5:7)]
test[-seq(3,7,2)]
test[-c(3,5,7)]
test[c(-3,-5,-7)]
test[-seq(3,7,2)] !
test[-c(3,5,7)]
git
git status
pip
movie2 <- c(2, 3, 4, 2)
data <- data.frame(movie1, movie2)
movie1 <- c(5, 4, 3, 5)
movie2 <- c(2, 3, 4, 2)
data <- data.frame(movie1, movie2)
View(data)
View(data)
movie3 = c(3,2,5,4)
movie4 = c(2,2,3,5)
data <- data.frame(movie1, movie2)
profvis::profvis({a <- c(3, 12, 4, 27, 21, 6, 15, 9)
a[5]  # 0부터 시작 X !!!!!! 1 부터 시작
a[c(2, 5, 6)]
a[seq(1, 7, 2)]
a[-8] # 제외할 위치 빼고 모두 출력
a[-c(1, 3, 5, 7, 9)]
a[a > 20]
a[a > 10 & a < 20]
# 실습 1
test = c(70, 85, 95, 65, 92, 68, 78, 45, 50, 60)
test_mean = mean(test)
test_sd = sd(test)
test = as.character(test)
test[c(5, 6, 7)]
test[-c(5:7)]
test[-seq(3, 7, 2)] # 셋 다 동일
test[-c(3, 5, 7)]
test[c(-3, -5, -7)]
movie1 <- c(5, 4, 3, 5)
movie2 <- c(2, 3, 4, 2)
movie3 = c(3, 2, 5, 4)
movie4 = c(2, 2, 3, 5)
data <- data.frame(movie1, movie2)})
a <- c(3, 12, 4, 27, 21, 6, 15, 9)
a[5]  # 0부터 시작 X !!!!!! 1 부터 시작
a[c(2, 5, 6)]
a[seq(1, 7, 2)]
a[-8] # 제외할 위치 빼고 모두 출력
a[-c(1, 3, 5, 7, 9)]
a[a > 20]
a[a > 10 & a < 20]
# 실습 1
test = c(70, 85, 95, 65, 92, 68, 78, 45, 50, 60)
test_mean = mean(test)
test_sd = sd(test)
test = as.character(test)
test[c(5, 6, 7)]
test[-c(5:7)]
test[-seq(3, 7, 2)] # 셋 다 동일
test[-c(3, 5, 7)]
test[c(-3, -5, -7)]
movie1 <- c(5, 4, 3, 5)
movie2 <- c(2, 3, 4, 2)
movie3 = c(3, 2, 5, 4)
movie4 = c(2, 2, 3, 5)
data <- data.frame(movie1, movie2)
data <- data.frame(movie1, movie2, movie3, movie4)
data[1,1]
data[3]
data.class()
data.class(1)
data.class(2)
data.class(5)
data.class(16)
data.class(17)
data.entry(1)
a <- c(3, 12, 4, 27, 21, 6, 15, 9)
a[5]  # 0부터 시작 X !!!!!! 1 부터 시작
a[c(2, 5, 6)]
a[seq(1, 7, 2)]
a[-8] # 제외할 위치 빼고 모두 출력
a[-c(1, 3, 5, 7, 9)]
a[a > 20]
a[a > 10 & a < 20]
# 실습 1
test = c(70, 85, 95, 65, 92, 68, 78, 45, 50, 60)
test_mean = mean(test)
test_sd = sd(test)
test = as.character(test)
test[c(5, 6, 7)]
test[-c(5:7)]
test[-seq(3, 7, 2)] # 셋 다 동일
test[-c(3, 5, 7)]
test[c(-3,-5,-7)]
movie1 = c(5, 4, 3, 5)
movie2 = c(2, 3, 4, 2)
movie3 = c(3, 2, 5, 4)
movie4 = c(2, 2, 3, 5)
data <- data.frame(movie1, movie2, movie3, movie4)
data[1, 1]
data[3]
data[1,]
data[3:4, :]
data[3:4, ]
data[3:5, ] # 3,4행 출력
data[3:4, ] # 3,4행 출력
data$movie3
data[3] # 3열 전체 출력
data[,'movie3']
data$movie3 # $열의 변수 출력
data[,'movie3']
data[,'movie3'] # 위와 동일
# 데이터 프레임에 열(column) 추가
data$log1 = log(data$movie1)
data$log1 = with(data, log(movie1))
data$log1 = with(data, log(movie1)) # 위와 동
View(data)
View(data)
data = transform(data, log1 = log(movie1), log2 = log(movie2))
print(data)
data
# 열 합치기 : cbind
test1 = data.frame(id=c(1:5))
View(test1)
View(test1)
# 열 합치기 : cbind
test1 = data.frame(id=c(1:5), midterm = c(90,80,70,80,70)) # id열 = 1~5로 df 만들기
# 열 합치기 : cbind
test1 = data.frame(id=c(1:5), midterm = c(90,80,70,80,70)) # id열 = 1~5로 df 만들기
test2 = data.frame(id=c(1:5), final = c(50,60,70,60,70))
total = cbind(test1, test2)
View(total)
View(total)
test1 = data.frame(id = c(1:5), score = c(90, 80, 70, 80, 70)) # id열 = 1~5로 df 만들기
test2 = data.frame(id = c(1:5), score = c(50, 60, 70, 60, 70))
total = rbind(test1, test2)
View(total)
View(total)
test1 <- data.frame(id = c(3:6),
+ midterm = c(90,80,70,80))
test1 <- data.frame(id = c(3:6),
+ midterm = c(90,80,70,80))
test1 <- data.frame(id = c(3:6),
+ midterm = c(90,80,70,80))
test1 <- data.frame(id = c(3:6),                    + midterm = c(90,80,70,80))
test1 <- data.frame(id = c(3:6), midterm = c(90,80,70,80))
test2 <- data.frame(id = c(1:4), final = c(60,70,60,70))
total = merge(tesst1, test2, by='id')
total = merge(test1, test2, by='id')
test1 <- data.frame(id = c(3:6), midterm = c(90,80,70,80))
test2 <- data.frame(id = c(1:4), final = c(60,70,60,70))
total = merge(test1, test2, by='id')
View(total)
View(total)
total = merge(test1, test2) # id를 기준으로 병합
View(total)
View(total)
total = merge(test1, test2, by='id', all=T) # Outet Join
View(total)
View(total)
View(total)
View(total)
test2 <- data.frame(id = c(1:4), final = c(60, 70, 60, 70))
total = merge(test1, test2, by = 'id', all = T) # Outet Join
total = merge(test1, test2, by = 'id', all.x = T) # Left Outer Join
total = merge(test1, test2, by = 'id', all.y = T) # Right Outer Join
View(test2)
View(test2)
View(total)
View(total)
getwd()
cd ..
dir
dir()
getwd()
getwd(.)
getwd('./')
getwd()
list.dirs()
list.files()
list.files(path = '../')
list.files(path = '../data')
install.packages('readxl')
library(readxl)
# 데이터 불러오기
library(readxl)
read_excel("../data/", sheet = NULL, range = NULL, col_names = T, col_types = NULL, na = "", trim_ws = T, skip = 0, n_max = inf, guess_max = min(1000, n_max))
F
T
read_excel("../data/customer_profile.xlsx", sheet = NULL, range = NULL, col_names = T, col_types = NULL, na = "", trim_ws = T, skip = 0, n_max = inf, guess_max = min(1000, n_max))
read_excel("../data/customer_profile.xlsx", sheet = NULL, range = NULL, col_names = T, col_types = NULL, na = "", trim_ws = T, skip = 0, n_max = Inf, guess_max = min(1000, n_max))
read_excel("../data/customer_profile.xlsx", sheet = NULL, range = NULL, col_names = T, col_types = NULL, na = "", trim_ws = T, skip = 0, n_max = infinite, guess_max = min(1000, n_max))
read_excel('../data/customer_profile.xlsx')
read_excel("../data/customer_profile.xlsx",
sheet = NULL, range = NULL, col_names = T, col_types = NULL, na = "", trim_ws = T, skip = 0, n_max = infinite, guess_max = min(1000, n_max))
read_excel(
"../data/customer_profile.xlsx",
sheet = NULL,
range = 'B3:E13',
col_names = T
)
read_excel(
"../data/customer_profile.xlsx",
sheet = NULL,
range = 'B3:E13',
col_names = T,
na = ""
)
read_excel(
"../data/customer_profile.xlsx",
sheet = NULL,
range = 'B3:E13',
col_names = T,
na = " "
)
read_excel(
"../data/customer_profile.xlsx",
sheet = NULL,
range = 'B3:E13',
col_names = T,
na = "dd"
)
read_excel(
"../data/customer_profile.xlsx",
sheet = NULL,
range = 'B3:E13',
col_names = T
)
read.csv(file = '../data/customer_profile.csv')
read.csv(file = '../data/customer_profile.csv', header = T)
read.csv(file = '../data/customer_profile.csv', header = T, sep = '\')
read.csv(file = '../data/customer_profile.csv', header = T, sep = '\')
read.csv(file = '../data/customer_profile.csv', header = T, sep = '\')
d
?
?
read.csv(file = '../data/customer_profile.csv', header = T, sep = '\'))
read.csv(file = '../data/customer_profile.csv', header = T, sep = '\'))
read.csv(file = '../data/customer_profile.csv', header = T, sep = '\'))
read.csv(file = '../data/customer_profile.csv', header = T, sep = ' ')
read.csv(file = '../data/customer_profile.csv', header = T, sep = '')
read.csv(file = '../data/customer_profile.csv', header = T, sep = ',')
read.csv(file = '../data/customer_profile.csv', header = T,)
read.csv(file = '../data/customer_profile.csv', header = T,)
read.csv(file = '../data/customer_profile.csv', header = T, stringsAsFactors = T)
read.csv(file = '../data/customer_profile.csv', header = T, stringsAsFactors = F)
+
test1 = c(1:10)
test1 = c(1:10)
write.csv(test1, file = '../data/test1.csv')
save(test1, file = '../data/test1.rda')
load("D:/FDOS/Program Files/JunHo/R/data/test1.rda")
load("D:/FDOS/Program Files/JunHo/R/data/test1.rda")
save(test1, file = '../data/test1.rda')
# 데이터 불러오기
library(readxl)
read_excel('../data/customer_profile.xlsx')
read_excel(
"../data/customer_profile.xlsx",
sheet = NULL,
range = 'B3:E13',
col_names = T
)
read.csv(file = '../data/customer_profile.csv',
header = T,
stringsAsFactors = F)
test1 = c(1:10)
write.csv(test1, file = '../data/test1.csv')
save(test1, file = '../data/test1.rda')
rm(test1)
load('../data/test1.rda')
load('../data/test1.csv')
load('../data/test1.rda')
install.packages('foreign')
install.packages('foriegn')
library(foriegn)
install.packages('foreign')
library(foreign)
install.packages('foreign')
update()
update(R)
update('R')
updateR()
install.packages("installr")
library(installr)
updateR()
updateR()
version
version
install.packages('foreign')
updateR()
install.packages("installr")
library(installr)
updateR()
version
# 데이터 불러오기
library(readxl)
read_excel('../data/customer_profile.xlsx')
read_excel(
"../data/customer_profile.xlsx",
sheet = NULL,
range = 'B3:E13',
col_names = T
)
read.csv(file = '../data/customer_profile.csv',
header = T,
stringsAsFactors = F)
test1 = c(1:10)
write.csv(test1, file = '../data/test1.csv')
save(test1, file = '../data/test1.rda')
rm(test1)
load('../data/test1.rda')
install.packages('foreign')
library(foreign)
version
read.spss('../data/iris.sav')
read.spss('../data/iris.sav',
to.data.frame = T,
use.value.labels = T # factor 형태로 받기
)
# 데이터 불러오기
library(readxl)
read_excel('../data/customer_profile.xlsx')
read_excel(
"../data/customer_profile.xlsx",
sheet = NULL,
range = 'B3:E13',
col_names = T
)
read.csv(file = '../data/customer_profile.csv',
header = T,
stringsAsFactors = F)
test1 = c(1:10)
write.csv(test1, file = '../data/test1.csv')
save(test1, file = '../data/test1.rda')
rm(test1)
load('../data/test1.rda')
install.packages('foreign')
library(foreign)
iris_spss =  read.spss('../data/iris.sav',
to.data.frame = T,
use.value.labels = T) # factor 형태로 받기
head()
# 데이터 불러오기
library(readxl)
read_excel('../data/customer_profile.xlsx')
read_excel(
"../data/customer_profile.xlsx",
sheet = NULL,
range = 'B3:E13',
col_names = T
)
read.csv(file = '../data/customer_profile.csv',
header = T,
stringsAsFactors = F)
test1 = c(1:10)
write.csv(test1, file = '../data/test1.csv')
save(test1, file = '../data/test1.rda')
rm(test1)
load('../data/test1.rda')
install.packages('foreign')
library(foreign)
iris_spss =  read.spss('../data/iris.sav',
to.data.frame = T,
use.value.labels = T) # factor 형태로 받기
head()
install.packages("foreign")
# 데이터 불러오기
library(readxl)
read_excel('../data/customer_profile.xlsx')
read_excel(
"../data/customer_profile.xlsx",
sheet = NULL,
range = 'B3:E13',
col_names = T
)
read.csv(file = '../data/customer_profile.csv',
header = T,
stringsAsFactors = F)
test1 = c(1:10)
write.csv(test1, file = '../data/test1.csv')
save(test1, file = '../data/test1.rda')
rm(test1)
load('../data/test1.rda')
library(foreign)
iris_spss =  read.spss('../data/iris.sav',
to.data.frame = T,
use.value.labels = T) # factor 형태로 받기
head()
head(iris_spss)
summary(iris_spss)
iris_spss =  read.spss('../data/iris.sav',
to.data.frame = T,
use.value.labels = F) # factor 형태로 받기
head(iris_spss)
summary(iris_spss)
colnames(iris)
nrow(iris) # 행 정
view(iris)
View(iris)
dim(iris)
table(iris)
table(iris$Species)
head(iris)
head(iris, 3)
head(iris, -3)
head(iris, 3:)
tail(iris, 3)
tail(iris)
str(iris)
summary(iris) # 데이터 요
summary(iris) # 데이터 요약
summary(iris) # 데이터 요약 like pythin's mean()
colnames(iris) # 열 정보
# 파생변수 만들기
mpg
install.packages("ggplot2")
install.packages(c("askpass", "backports", "cluster"))
install.packages("cluster")
# 파생변수 만들기
mpg
install.packages("ggplot2")
install.packages("cluster")
# 파생변수 만들기
library('ggplot2')
mpg
str(mpg)
str(iris)   # 데이터 속성 확인 like python's info()
str(mpg)
mpg
mpg$total = (mpg$cty + mpg$hwy) / 2
mpg$total = (mpg$cty + mpg$hwy) / 2
View(mpg)
View(mpg)
# 파생변수 만들기
library(ggplot2)
mpg$total = (mpg$cty + mpg$hwy) / 2
help
help(mpg)
mean(total)
mean(mpg$total)
ifelse(mpg$total >= 20, "pass", "fail")
view(mpg$total)
View(mpg$total)
mpg$test = ifelse(mpg$total >= 20, "pass", "fail") # 3항 연산자와 비슷 (조건 ? trueCase : falseCase)
View(mpg)
View(mpg$test)
load("D:/FDOS/Program Files/JunHo/R/ch_03/.RData")
mpg$grade = ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B",                          "C"))
# 데이터 파악
colnames(iris) # 열 정보
nrow(iris) # 행 정보
View(iris) # 첫글자 대문자!!!!
dim(iris) # 형태(차원) 확인
table(iris$Species)
head(iris, 3)
tail(iris)
str(iris)   # 데이터 속성 확인 like python's info()
summary(iris) # 데이터 요약 like pythin's mean()
# 파생변수 만들기
library(ggplot2)
mpg$total = (mpg$cty + mpg$hwy) / 2
mean(mpg$total)
mpg$test = ifelse(mpg$total >= 20, "pass", "fail") # 3항 연산자와 비슷 (조건 ? trueCase : falseCase)
mpg$grade = ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C"))
View(mpg)
View(mpg)
str(mpg)
install.packages("dplyr")
library(dplyr)
df_raw = data.frame(var1 = c(1,2,1), var2=c(2,3,2))
df_raw
df_new = df_raw
df_new = rename(df_new, v2 = var2)
df_new
str(df_new)
df_new$v2=v3
df_new$v2='v3'
df_new
df_new = df_raw
df_new = rename(df_new, v2 = var2)
df_new
sales <- data.frame(c('스노우맨', '연금술사', '벚꽃동산 '),
+ c(12000,10000,9000),
+ c(50,78,35))
# 실습 1
library(MASS)
head(UScereal)
View(UScereal)
? UScereal
more.sugar = filter(UScereal, UScereal$sugars > mean(UScereal$sugars))
less.sugar = filter(UScereal, UScereal$sugars <= mean(UScereal$sugars))
mean(more.sugar$sugars)
mean(less.sugar$sugars)
shelf_3 = filter(UScereal, UScereal$shelf == 3)
shelf_1 = filter(UScereal, UScereal$shelf == 1)
mean(shelf_3$fat)
mean(shelf_1$fat)
v.cereal = filter(UScereal, vitamins == "enriched" |
vitamins == "100%")
v.cereal <- filter(UScereal, vitamins %in% c("enriched", "100%"))
mean(v.cereal$calories)
# 실습 2
head(Animals)
? Animals
new_animals = mutate(Animals, ratio = (brain / (body * 1000) * 100))
new_animals = mutate(new_animals, size = ifelse(brain > mean(brain), 'big', 'small'))
# 실습 3
head(mpg)
mpg %>%
group_by(manufacturer)
